#pragma once

#include <vector>
#include "Pixel.h"
#include "Coordinate.h"

using namespace std;

/*
	After Voronoi computation is completed this can iterate over the
	seeds and turn their color to be black. This allows for the
	seeds to b visible in the output image.
*/
void SetSeedsBlack(Pixel* seeds, Pixel* grid, int numSeeds, int width);

/*
	Initializes the Pixels in the grid to match the input image and
	to reset any computations done in previous Voronoi computations.
	i.e. we run this after computing the serial Voronoi to ensure
	that the GPU Voronoi is correctly functioning.
*/
void ResetGridPixels(Pixel* grid, vector<vector<Pixel>>, int height, int width);


/*
	Computes the maximum, minimum distance between any Pixel and its
	closest seed that was generated by Poisson sampling.
	This distance can then be usedfor local seed search if its
	returned value squared is less than the number of seeds.

	Has a computational complexity of O(nm), where n is the number
	of Pixels and m is the number of seeds, so recommended to use
	r^2 for the search radius, which based on observation is more
	than enough to properly compute the local search.
*/
int ComputeSearchRadius(std::vector<Coordinate>& points, vector<vector<Pixel>>& image);

/*
	For each Pixel in the grid, iterate through all seeds
	and take update the Pixel's color to be that of its closest
	seed.
*/
void ComputeVoronoiGlobal(Pixel* grid, Pixel* seeds, int numSeeds, int height, int width);

/*
	For each Pixel in the grid, iterate through a box surrounding it
	of size search_radius^2 Pixels and if the Pixel
	is a seed calculate the distance from it. The current Pixel
	takes the color of its closest seed.
*/
void ComputeVoronoiLocal(Pixel* grid, int height, int width, int searchRadius);

/*
	For each seed, create a bounding box around it of size distance^2
	and sample the color of the Pixels within. Update the seed's color
	to the mean color of the sampled Pixels.

	Recommended that distance is less than the radius given to poisson sampling.
*/
Color* ComputeMeanColor(Pixel* grid, Pixel* seeds, int numSeeds,
	int width, int height, int distance);

/*
Creates numSeeds random colors.
*/
Color* CreateRandomColors(int numSeeds);
